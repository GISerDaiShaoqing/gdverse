---
title: "Spatial Association Detector(SPADE)"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{SPADE}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "##",
  warning = FALSE,
  message = FALSE,
  fig.path = "man/figures/spade/"
)
```

### Load data and package

``` {r}
library(sf)
library(tidyverse)
library(magrittr)
library(gdverse)

suhii = read_sf(system.file('extdata/SUHII.gpkg',package = 'gdverse'))
suhii
```

```{r echo=FALSE, out.width='80%', fig.align="center",fig.cap="Overview Map of the Study Area Regarding SUHII"}
knitr::include_graphics('../man/figures/spade/XianSUHII.png')
```

This spatial polygon vector data `suhii` is the streets divided based on roads within *the Ring expressway of Xi'an City*, and the attribute data are the *SUHII*(Intensity of surface urban heat island effect) and its influence factors.

The meanings of each explanatory variable are as follows:

| Indicator | Meaning | Formula| Data source     |
|------------------|-------------------|------------------|------------------|
| SUHII     | Intensity of surface urban heat island effect| $$ SUHII = LST - LST_{mean\_suburbs} $$ | Landsat8 Images |
| BH        | Building height (the height from the roof surface to the outdoor ground level) | /  | CNBH10m Dataset |
| BD        | Building density (the ratio of the land area occupied by buildings to the total land area) | $$ BD = \frac{\sum_{i=1}^nBS_i}{S_{land}} $$| CNBH10m DataSet |
| SVF       | Sky View Factor (the ratio of the visible sky area at a specific point or area to the total ground area in its surrounding vicinity) | $$  SVF= \frac{1}{2\pi}\int_{0}^{2\pi}\left[\cos\beta\cos^{2}\phi+\sin\beta\cos(\vartheta-a)(90-\phi-\sin\phi\cos\phi)\right]\,d\vartheta $$ | GLO-30 DEM      |
| FAR       | Floor Area Ratio (the ratio of the total floor area of buildings on a site to the net land area of that site)  | $$ FAR = \frac{\sum_{i=1}^nBS_i\times\frac{BH}{3}}{s_{land}} $$  | CNBH10m Dataset |
| RD        | Road density (the ratio of the total road length to the area of the region) | $$ RD = \frac{RL_i\times RW_i}{S_{land}} $$  | OpenStreetMap   |
| ELEV      | Elevation | /| GLO-30 DEM      |
| NDVI      | Normalized difference vegetation index | $$ NDVI = \frac{NIR -R}{NIR + R} $$  | Landsat8 Image  |
| NDWI      | Normalized difference water index | $$ NDWI = \frac{G - NIR}{G + NIR} $$   | Landsat8 Image  |

### Spatial pattern of SUHI

#### global spatial autocorrelation of SUHI

here I use `sfdep` to calculate the global **Moran's I**:

```{r}
global_moranI = \(data,col,nb,wt){
  I = sfdep::global_moran(dplyr::pull(data,{{col}}),
                          dplyr::pull(data,{{nb}}),
                          dplyr::pull(data,{{wt}}),
                          na_ok = T)$I
  PValue = sfdep::global_moran_test(dplyr::pull(data,{{col}}),
                                    dplyr::pull(data,{{nb}}),
                                    dplyr::pull(data,{{wt}}),
                                    na.action = na.omit)$p.value
  moranI = c(I,PValue)
  names(moranI) = c("Moran'I Index","P Value")
  return(moranI)
}

suhii |>
  dplyr::filter(!if_any(everything(),is.na)) |>
  mutate(nb = sfdep::st_contiguity(geom),
         wt = sfdep::st_weights(nb)) |>
  dplyr::select(SUHII,nb,wt) -> new_suhii

new_suhii
set.seed(123456789)

gmi = new_suhii |>
  global_moranI(SUHII,nb,wt)
gmi
```

The global Moran's Index is `r gmi[1]` and the P value is `r gmi[2]`, which shows that SUHII in the core urban area of Xi'an has significant positive spatial autocorrelation in the global scale.

#### local spatial autocorrelation of SUHI

We will use `tidyrgeoda` to run the `LISA`, more details see [**here**](https://spatlyu.github.io/tidyrgeoda/articles/Local-Indicators-of-Spatial-Association.html)

```{r SUHII_LISA,fig.width=7.5,fig.height=4}
library(tidyrgeoda)

new_suhii %>%
  mutate(lisa = st_local_moran(., 'SUHII',
                               wt = st_contiguity_weights(.),
                               significance_cutoff = 0.05)) %>%
  select(lisa) %>%
  ggplot() +
  geom_sf(aes(fill = lisa),lwd = .1,color = 'grey') +
  scale_fill_lisa(name = 'SUHII-LISA') +
  theme_bw() +
  theme(
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.title = element_blank(),
    panel.grid = element_blank(),
    legend.title = element_text(size = 7.5),
    legend.text = element_text(size = 7.5),
    legend.key.size = unit(.5, 'cm')
  )
```

The global and local spatial autocorrelation shows that SUHII's strong spatial dependence.

Spatial dependence was neglected in native geodetector, which leds to the development of **SPADE**(spatial association detector).

### OPGD modeling

```{r}
suhii_opgd = opgd(SUHII ~ ., data = st_drop_geometry(suhii),
                  discvar = names(select(st_drop_geometry(new_suhii),-SUHII)),
                  cores = 12)
suhii_opgd
```

**You can access the detailed q statistics by `suhii_opgd$factor`.**

```{r}
suhii_opgd$factor
```

### SPADE modeling

*SPADE* explicitly considers the spatial variance by assigning the weight of the influence based on spatial distribution and also minimizes the influence of the number of levels on PD values by using the multilevel discretization and considering information loss due to discretization.

When response variable has a strong spatial dependence, maybe *SPADE* is a best choice.

The biggest difference between SPADE and native GD & OPGD in actual modeling is that SPADE requires a spatial weight matrix to calculate spatial variance.

In `gdverse`, when you not provide a spatial weight matrix, it will use **1st order inverse distance weight** by default, which can be created by `inverse_distance_weight()`.

```{r}
coords = suhii |>
  st_centroid() |>
  st_coordinates()

wt1 = inverse_distance_weight(coords[,1],coords[,2])
```

You can also use gravity model weight by assigning the `power` parameter in `inverse_distance_weight()` function.

```{r}
wt2 = inverse_distance_weight(coords[,1],coords[,2],power = 2)
```

#### using spatial weight matrix from sdsfun

I have also developed the [sdsfun](https://stscl.github.io/sdsfun/) package to facilitate the construction of spatial weight matrices, which requires an input of an sf object.

```{r}
wt3 = sdsfun::spdep_contiguity_swm(suhii)
```

Or using a spatial weight matrix based on distance kernel functions.

```{r}
wt4 = spdep_distance_swm(suhii,k = 3, kernel = 'gaussian')
```

In the following section we will execute *SPADE* model using spatial weight matrix `wt3` which is constructed by queen contiguity.

The test of *SPADE* model significance in `gdverse` is achieved by randomization null hypothesis use a pseudo-p value, this calculation is very time-consuming. Default `gdverse` sets the `permutations` parameter to 0 and does not calculate the pseudo-p value. If you want to calculate the pseudo-p value, specify the `permutations` parameter to a number such as 99,999,9999, etc.

#### run SPADE

```{r ushi_SPADE_factor,fig.width=8.5,fig.height=6.5}
suhii_spade = spade(SUHII ~ .,
                    data = st_drop_geometry(suhii),
                    wt = wt3, cores = 12)
suhii_spade
plot(suhii_spade,slicenum = 6)
```

**You can also access the detailed q statistics by `suhii_spade$factor`**

```{r}
suhii_spade$factor
```

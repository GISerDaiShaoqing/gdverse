---
title: "Spatial Association Detector(SPADE)"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{spade}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "##",
  warning = FALSE,
  message = FALSE,
  fig.path = "man/figures/spade/"
)
```

### Load data and package

We use the [`corrected boston bousing data`](https://jakubnowosad.com/spData/reference/boston.html) from the `spData` package and select a few variables to show how to apply the SPADE model.

``` {r}
library(sf)
library(tidyverse)
library(gdverse)

boston = spData::boston.c %>%
  as_tibble() %>%
  select(CMEDV,CRIM,RM,DIS,RAD,PTRATIO,LON,LAT) %>%
  st_as_sf(coords = c('LON','LAT'), crs = 4326)
boston
```

### Spatial Autocorrelation of CMEDV

here I use `geocomplexity` to calculate the global **Moran's I**:

```{r}
set.seed(123456789)

gmi = geocomplexity::moran_test(boston)
gmi
```

The global Moran'I Index of CMEDV is `0.336586` and the P value is `6.689e-39`,which shows that `CMEDV` has significant positive spatial autocorrelation in the global scale.

### SPADE modeling

*SPADE* explicitly considers the spatial variance by assigning the weight of the influence based on spatial distribution and also minimizes the influence of the number of levels on PD values by using the multilevel discretization and considering information loss due to discretization.

When response variable has a strong spatial dependence, maybe *SPADE* is a best choice.

The biggest difference between SPADE and native GD and OPGD in actual modeling is that SPADE requires a spatial weight matrix to calculate spatial variance.

In `spade` function, when you not provide a spatial weight matrix, it will use **1st order inverse distance weight** by default, which can be created by `inverse_distance_weight()`.

```{r}
coords = boston |>
  st_centroid() |>
  st_coordinates()

wt1 = inverse_distance_weight(coords[,1],coords[,2])
```

You can also use gravity model weight by assigning the `power` parameter in `inverse_distance_weight()` function.

```{r}
wt2 = inverse_distance_weight(coords[,1],coords[,2],power = 2)
```

#### using spatial weight matrix from sdsfun

I have also developed the [sdsfun](https://stscl.github.io/sdsfun/) package to facilitate the construction of spatial weight matrices, which requires an input of an sf object.

```{r}
wt3 = sdsfun::spdep_contiguity_swm(boston)
```

Or using a spatial weight matrix based on distance kernel functions.

```{r}
wt4 = sdsfun::spdep_distance_swm(boston, k = 6, kernel = 'gaussian')
```

In the following section we will execute *SPADE* model using spatial weight matrix `wt4` which is constructed by distance kernel function.

The test of *SPADE* model significance in `gdverse` is achieved by randomization null hypothesis use a pseudo-p value, this calculation is very time-consuming. Default `gdverse` sets the `permutations` parameter to 0 and does not calculate the pseudo-p value. If you want to calculate the pseudo-p value, specify the `permutations` parameter to a number such as 99,999,9999, etc.

#### run SPADE

```{r spade,fig.width=8.5,fig.height=6.5}
boston_spade = spade(SUHI ~ ., data = ushi, wt = wt3, cores = 12)
boston_spade
plot(ushi_spade,slicenum = 3)
```

**You can also access the detailed q statistics by `boston_spade$factor`**

```{r}
boston_spade$factor
```
